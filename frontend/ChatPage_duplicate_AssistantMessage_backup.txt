
const AssistantMessage = React.memo(({ message }) => {
  const [copiedIndex, setCopiedIndex] = React.useState(null);

  const handleCopyTitle = (title, index) => {
    navigator.clipboard.writeText(title);
    setCopiedIndex(index);
    setTimeout(() => setCopiedIndex(null), 2000);
  };

  // Format message content for display
  const formatContent = () => {
    if (message.titles) {
      return (
        <>
          <div className="whitespace-normal break-words">
            안녕하세요! 기사 제목을 생성했습니다.
          </div>
          <div className="whitespace-normal break-words">
            아래 {message.titles.length}개의 제목 중에서 가장 적합한 것을
            선택하시거나, 수정하여 사용하실 수 있습니다:
          </div>
          <ol className="list-decimal space-y-2 pl-7">
            {message.titles.map((title, index) => (
              <li
                key={index}
                className="whitespace-normal break-words group/item relative"
              >
                <div className="flex items-start justify-between gap-2">
                  <span className="flex-1">{title}</span>
                  <button
                    onClick={() => handleCopyTitle(title, index)}
                    className="opacity-0 group-hover/item:opacity-100 transition-opacity duration-200 p-1 hover:bg-bg-300 rounded-md shrink-0 ml-2"
                    title="복사"
                  >
                    {copiedIndex === index ? (
                      <span className="text-xs text-accent-main-100">✓</span>
                    ) : (
                      <Copy size={14} className="text-text-400" />
                    )}
                  </button>
                </div>
              </li>
            ))}
          </ol>
          <div className="whitespace-normal break-words">
            추가로 다른 스타일의 제목이 필요하시거나, 특정 톤앤매너로 수정을
            원하시면 말씀해 주세요.
          </div>
        </>
      );
    } else if (message.isError) {
      return (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="text-red-800 whitespace-normal break-words">
            {message.content}
          </div>
        </div>
      );
    } else {
      // 마크다운 렌더링 적용
      return (
        <div className="chatbot-markdown prose prose-sm max-w-none">
          <ReactMarkdown
            remarkPlugins={[remarkGfm, remarkBreaks, remarkMath, remarkEmoji]}
            rehypePlugins={[rehypeKatex]}
            components={{
              p: ({ children }) => (
                <p className="mb-4 leading-relaxed">{children}</p>
              ),
              strong: ({ children }) => (
                <strong className="font-bold text-text-100">{children}</strong>
              ),
              em: ({ children }) => <em className="italic">{children}</em>,
              h1: ({ children }) => (
                <h1 className="text-2xl font-bold mb-4 mt-6 pb-2 border-b border-border-200">
                  {children}
                </h1>
              ),
              h2: ({ children }) => (
                <h2 className="text-xl font-bold mb-3 mt-5 pb-1 border-b border-border-300">
                  {children}
                </h2>
              ),
              h3: ({ children }) => (
                <h3 className="text-lg font-bold mb-2 mt-4 text-accent-main-100">
                  {children}
                </h3>
              ),
              ul: ({ children }) => (
                <ul className="list-disc pl-6 mb-4 space-y-2">{children}</ul>
              ),
              ol: ({ children }) => (
                <ol className="list-decimal pl-6 mb-4 space-y-2">{children}</ol>
              ),
              li: ({ children, ordered, index, ...props }) => {
                // 체크리스트 지원
                const text = children && children[0];
                if (typeof text === "string") {
                  const checkMatch = text.match(/^\[([x ])\] (.*)$/);
                  if (checkMatch) {
                    const checked = checkMatch[1] === "x";
                    const content = checkMatch[2];
                    return (
                      <li
                        className="flex items-start gap-2 list-none -ml-6"
                        {...props}
                      >
                        <input
                          type="checkbox"
                          checked={checked}
                          readOnly
                          className="mt-1 cursor-not-allowed"
                        />
                        <span
                          className={checked ? "line-through opacity-70" : ""}
                        >
                          {content}
                        </span>
                      </li>
                    );
                  }
                }
                return (
                  <li className="leading-relaxed" {...props}>
                    {children}
                  </li>
                );
              },
              code: ({ inline, className, children, ...props }) => {
                const match = /language-(\w+)/.exec(className || "");
                const codeString = String(children).replace(/\n$/, "");

                if (!inline && match) {
                  return (
                    <div className="relative group mb-4">
                      <button
                        onClick={() => {
                          navigator.clipboard.writeText(codeString);
                          const btn = event.target;
                          btn.textContent = "✓ 복사됨";
                          setTimeout(() => (btn.textContent = "복사"), 2000);
                        }}
                        className="absolute right-2 top-2 px-2 py-1 text-xs bg-bg-300 hover:bg-bg-400 rounded opacity-0 group-hover:opacity-100 transition-opacity"
                      >
                        복사
                      </button>
                      <SyntaxHighlighter
                        language={match[1]}
                        style={vscDarkPlus}
                        customStyle={{
                          margin: 0,
                          borderRadius: "0.5rem",
                          fontSize: "0.875rem",
                        }}
                        {...props}
                      >
                        {codeString}
                      </SyntaxHighlighter>
                    </div>
                  );
                }

                return inline ? (
                  <code
                    className="px-1.5 py-0.5 bg-bg-300 text-accent-main-100 rounded text-sm"
                    {...props}
                  >
                    {children}
                  </code>
                ) : (
                  <code
                    className="block p-4 bg-bg-200 rounded-lg overflow-x-auto text-sm"
                    {...props}
                  >
                    {children}
                  </code>
                );
              },
              pre: ({ children }) => <div className="mb-4">{children}</div>,
              blockquote: ({ children }) => {
                // 알림 박스 지원 (> [!NOTE], > [!TIP], > [!WARNING], > [!IMPORTANT])
                const text =
                  children &&
                  children[0] &&
                  children[0].props &&
                  children[0].props.children;
                if (typeof text === "string") {
                  const alertMatch = text.match(
                    /^\[!(NOTE|TIP|WARNING|IMPORTANT|CAUTION)\]/
                  );
                  if (alertMatch) {
                    const type = alertMatch[1].toLowerCase();
                    const content = text.replace(
                      /^\[!(NOTE|TIP|WARNING|IMPORTANT|CAUTION)\]\s*/,
                      ""
                    );
                    const styles = {
                      note: "bg-blue-900/20 border-blue-500 text-blue-200",
                      tip: "bg-green-900/20 border-green-500 text-green-200",
                      warning:
                        "bg-yellow-900/20 border-yellow-500 text-yellow-200",
                      important:
                        "bg-purple-900/20 border-purple-500 text-purple-200",
                      caution: "bg-red-900/20 border-red-500 text-red-200",
                    };
                    const icons = {
                      note: "📝",
                      tip: "💡",
                      warning: "⚠️",
                      important: "❗",
                      caution: "🚨",
                    };
                    return (
                      <div
                        className={`border-l-4 p-4 my-4 rounded-r ${styles[type]}`}
                      >
                        <div className="flex items-start gap-2">
                          <span className="text-xl">{icons[type]}</span>
                          <div>
                            <div className="font-bold mb-1 uppercase">
                              {type}
                            </div>
                            <div>{content}</div>
                          </div>
                        </div>
                      </div>
                    );
                  }
                }
                return (
                  <blockquote className="border-l-4 border-border-300 pl-4 italic my-4">
                    {children}
                  </blockquote>
                );
              },
              a: ({ href, children }) => (
                <a
                  href={href}
                  className="text-accent-main-000 underline hover:text-accent-main-200"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  {children}
                </a>
              ),
              hr: () => <hr className="my-6 border-border-300" />,
              table: ({ children }) => (
                <div className="chatbot-table-wrapper my-4">
                  <table className="w-full">{children}</table>
                </div>
              ),
              thead: ({ children }) => (
                <thead className="bg-bg-200">{children}</thead>
              ),
              th: ({ children }) => (
                <th className="px-4 py-3 text-left font-semibold border-b-2 border-border-300">
                  {children}
                </th>
              ),
              td: ({ children }) => (
                <td className="px-4 py-3 border-b border-border-400">
                  {children}
                </td>
              ),
              tbody: ({ children }) => <tbody>{children}</tbody>,
              tr: ({ children }) => (
                <tr className="hover:bg-bg-100 transition-colors">
                  {children}
                </tr>
              ),
            }}
          >
            {message.content}
          </ReactMarkdown>
        </div>
      );
    }
  };

  return (
    <>
      <div data-test-render-count="1" className="mb-1 mt-1">
        <div 
          style={{ 
            height: "auto", 
            opacity: 1, 
            transform: "none",
            transition: "opacity 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94), transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94)"
          }}
        >
          <div className="group relative pb-3">
            <div
              className="relative pl-2.5 pr-2"
              style={{
                fontFamily: "var(--font-claude-response)",
                fontSize: "0.9375rem",
                lineHeight: "1.65rem",
                letterSpacing: "-0.015em",
                color: "hsl(var(--text-100))",
                wordBreak: "break-words",
              }}
            >
              <div>
                <div 
                  className="grid-cols-1 grid gap-2.5"
                  style={{
                    animation: message.isStreaming ? "subtle-pulse 2s ease-in-out infinite" : "none"
                  }}
                >
                  {formatContent()}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
});

AssistantMessage.displayName = 'AssistantMessage';
