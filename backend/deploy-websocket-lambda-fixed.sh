#!/bin/bash

echo "üöÄ Starting WebSocket Lambda deployment to Virginia (us-east-1)"

# ÏÑ§Ï†ï
FUNCTION_NAME="nx-tt-dev-ver3-websocket-message"
ROLE_NAME="nx-tt-dev-ver3-WebSocketLambdaRole"
REGION="us-east-1"
TABLE_NAME="nx-tt-dev-ver3-conversations"

# 1. Î∞∞Ìè¨ ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
echo "1. Creating deployment package with proper folder structure..."
cd lambda/websocket

# LambdaÍ∞Ä lambda_function.pyÎ•º Ï∞æÎèÑÎ°ù Î≥µÏÇ¨
cp websocket_message_handler.py lambda_function.py

# shared Ìè¥Îçî Íµ¨Ï°∞ Ïú†ÏßÄÌïòÎ©∞ Î≥µÏÇ¨
mkdir -p shared
cp ../shared/bedrock_client.py shared/ 2>/dev/null
cp ../shared/bedrock_client_enhanced.py shared/ 2>/dev/null

# Î™®Îì† ÌïÑÏöîÌïú ÌååÏùº Ìè¨Ìï® (shared Ìè¥Îçî Íµ¨Ï°∞ Ïú†ÏßÄ)
zip -r websocket_deployment.zip lambda_function.py conversation_manager.py shared/ 2>/dev/null

# ÏûÑÏãú ÌååÏùº ÏÇ≠Ï†ú
rm lambda_function.py
rm -rf shared/

# 2. Lambda Ìï®Ïàò ÏóÖÎç∞Ïù¥Ìä∏ ÎòêÎäî ÏÉùÏÑ±
echo "2. Updating Lambda function..."
aws lambda update-function-code \
    --function-name $FUNCTION_NAME \
    --zip-file fileb://websocket_deployment.zip \
    --region $REGION 2>/dev/null

if [ $? -ne 0 ]; then
    echo "Function doesn't exist, creating new one..."
    
    # IAM Ïó≠Ìï† ÏÉùÏÑ±
    aws iam create-role \
        --role-name $ROLE_NAME \
        --assume-role-policy-document '{
            "Version": "2012-10-17",
            "Statement": [{
                "Effect": "Allow",
                "Principal": {"Service": "lambda.amazonaws.com"},
                "Action": "sts:AssumeRole"
            }]
        }' \
        --region $REGION 2>/dev/null
    
    # Ï†ïÏ±Ö Ïó∞Í≤∞
    aws iam attach-role-policy \
        --role-name $ROLE_NAME \
        --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole \
        --region $REGION 2>/dev/null
    
    aws iam attach-role-policy \
        --role-name $ROLE_NAME \
        --policy-arn arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess \
        --region $REGION 2>/dev/null
    
    aws iam attach-role-policy \
        --role-name $ROLE_NAME \
        --policy-arn arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess \
        --region $REGION 2>/dev/null
    
    # Bedrock Ï†ïÏ±Ö Ï∂îÍ∞Ä
    aws iam put-role-policy \
        --role-name $ROLE_NAME \
        --policy-name BedrockInvokePolicy \
        --policy-document '{
            "Version": "2012-10-17",
            "Statement": [{
                "Effect": "Allow",
                "Action": [
                    "bedrock:InvokeModel",
                    "bedrock:InvokeModelWithResponseStream"
                ],
                "Resource": "*"
            }]
        }' \
        --region $REGION 2>/dev/null
    
    # 10Ï¥à ÎåÄÍ∏∞ (Ïó≠Ìï† ÏÉùÏÑ± ÏôÑÎ£å ÎåÄÍ∏∞)
    echo "Waiting for role to be ready..."
    sleep 10
    
    # Lambda Ìï®Ïàò ÏÉùÏÑ±
    aws lambda create-function \
        --function-name $FUNCTION_NAME \
        --runtime python3.11 \
        --role arn:aws:iam::887078546492:role/$ROLE_NAME \
        --handler lambda_function.lambda_handler \
        --zip-file fileb://websocket_deployment.zip \
        --timeout 60 \
        --memory-size 512 \
        --description "WebSocket message handler for chat streaming" \
        --region $REGION
else
    echo "‚úÖ Function code updated successfully"
fi

# 3. ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï
echo "3. Updating environment variables..."
aws lambda update-function-configuration \
    --function-name $FUNCTION_NAME \
    --environment "Variables={CONVERSATIONS_TABLE=$TABLE_NAME}" \
    --region $REGION > /dev/null 2>&1

# 4. API Gateway Í∂åÌïú ÌôïÏù∏
echo "4. Checking API Gateway integration..."
API_ID=$(aws apigatewayv2 get-apis --region $REGION --query "Items[?Name=='nx-tt-dev-ver3-websocket-api'].ApiId" --output text)

if [ -n "$API_ID" ]; then
    # Lambda Í∂åÌïú Ï∂îÍ∞Ä (API GatewayÍ∞Ä LambdaÎ•º Ìò∏Ï∂úÌï† Ïàò ÏûàÎèÑÎ°ù)
    aws lambda add-permission \
        --function-name $FUNCTION_NAME \
        --statement-id AllowAPIGatewayInvoke \
        --action lambda:InvokeFunction \
        --principal apigateway.amazonaws.com \
        --source-arn "arn:aws:execute-api:$REGION:887078546492:$API_ID/*/*/*" \
        --region $REGION 2>/dev/null
fi

echo ""
echo "========================================="
echo "‚úÖ WebSocket Lambda Deployment Complete!"
echo "========================================="
echo "Function: $FUNCTION_NAME"
echo "Region: $REGION"
echo "Table: $TABLE_NAME"
echo "API Gateway: wss://$API_ID.execute-api.$REGION.amazonaws.com/production"
echo "========================================="

# Î∞∞Ìè¨ Ìå®ÌÇ§ÏßÄ ÏÇ≠Ï†ú
rm websocket_deployment.zip