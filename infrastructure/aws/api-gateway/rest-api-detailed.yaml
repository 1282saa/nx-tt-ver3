# REST API Gateway 상세 설정
# 파일: rest-api-detailed.yaml
# 용도: Nexus REST API 상세 구성
# 주의: CORS 설정 누락 시 Frontend 연결 실패

api:
  name: nexus-rest-api
  description: Nexus Title Generation REST API
  endpoint_type: REGIONAL  # EDGE는 CloudFront 사용 시
  
  # API 키 설정 (보안)
  api_key_required: false  # true로 변경 시 x-api-key 헤더 필요
  
  # 스테이지 설정
  stages:
    - name: prod
      throttle:
        rate_limit: 10000  # 초당 요청 수
        burst_limit: 5000  # 버스트 한계
      logging:
        level: ERROR  # ERROR, INFO, OFF
        data_trace: false  # true 시 요청/응답 로깅 (비용 증가)
      
    - name: dev
      throttle:
        rate_limit: 1000
        burst_limit: 500
      logging:
        level: INFO
        data_trace: true

# CORS 설정 (매우 중요!)
cors:
  # 허용 오리진 (프론트엔드 URL)
  allow_origins:
    - "http://localhost:3000"  # 개발
    - "http://localhost:5173"  # Vite 개발 서버
    - "https://d1s58eamawxu4.cloudfront.net"  # CloudFront
    - "https://*.sedaily.io"  # 커스텀 도메인
  
  # 허용 헤더 (누락 시 401 에러)
  allow_headers:
    - "Content-Type"
    - "Authorization"  # Cognito 토큰
    - "X-Amz-Date"
    - "X-Api-Key"
    - "X-Amz-Security-Token"
    - "X-Requested-With"
  
  # 허용 메서드
  allow_methods:
    - "GET"
    - "POST"
    - "PUT"
    - "DELETE"
    - "OPTIONS"  # Preflight 필수
    - "PATCH"
  
  # 노출 헤더 (Frontend에서 읽을 수 있는 헤더)
  expose_headers:
    - "Date"
    - "ETag"
    - "x-amzn-RequestId"
    - "x-amzn-ErrorType"
    - "x-amz-apigw-id"
  
  max_age: 86400  # Preflight 캐시 시간 (초)
  allow_credentials: true  # 쿠키 사용 시 필수

# 엔드포인트 상세 설정
endpoints:
  # ===== CONVERSATIONS =====
  - path: /conversations
    methods:
      - method: GET
        description: "대화 목록 조회"
        request:
          parameters:
            - name: userId
              in: query
              required: true
              type: string
            - name: engineType
              in: query
              required: false
              type: string
              enum: ["T5", "H8"]
            - name: limit
              in: query
              required: false
              type: integer
              default: 20
        integration:
          type: AWS_PROXY
          lambda_function: nx-tt-dev-ver3-conversation-api
          timeout: 29000  # API Gateway 최대 29초
        responses:
          200:
            description: "성공"
          401:
            description: "인증 실패"
          500:
            description: "서버 오류"
      
      - method: POST
        description: "새 대화 생성"
        request:
          body:
            required: true
            schema:
              type: object
              properties:
                userId:
                  type: string
                engineType:
                  type: string
                  enum: ["T5", "H8"]
                title:
                  type: string
              required: ["userId", "engineType"]
        integration:
          type: AWS_PROXY
          lambda_function: nx-tt-dev-ver3-conversation-api
          timeout: 29000
      
      - method: OPTIONS
        description: "CORS Preflight"
        integration:
          type: MOCK  # Lambda 호출 없이 처리
          request_templates:
            application/json: '{"statusCode": 200}'
        responses:
          200:
            headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'*'"
              Access-Control-Allow-Methods: "'*'"

  # ===== CONVERSATION BY ID =====
  - path: /conversations/{conversationId}
    methods:
      - method: GET
        description: "특정 대화 조회"
        request:
          parameters:
            - name: conversationId
              in: path
              required: true
              type: string
        integration:
          type: AWS_PROXY
          lambda_function: nx-tt-dev-ver3-conversation-api
          timeout: 29000
      
      - method: PUT
        description: "대화 업데이트 (제목, 메시지 추가)"
        request:
          parameters:
            - name: conversationId
              in: path
              required: true
              type: string
          body:
            schema:
              type: object
              properties:
                title:
                  type: string
                messages:
                  type: array
                  items:
                    type: object
                    properties:
                      role:
                        type: string
                        enum: ["user", "assistant"]
                      content:
                        type: string
        integration:
          type: AWS_PROXY
          lambda_function: nx-tt-dev-ver3-conversation-api
          timeout: 29000
      
      - method: DELETE
        description: "대화 삭제"
        request:
          parameters:
            - name: conversationId
              in: path
              required: true
              type: string
        integration:
          type: AWS_PROXY
          lambda_function: nx-tt-dev-ver3-conversation-api
          timeout: 29000

  # ===== PROMPTS =====
  - path: /prompts
    methods:
      - method: GET
        description: "프롬프트 목록 조회"
        request:
          parameters:
            - name: userId
              in: query
              required: false
              type: string
            - name: engineType
              in: query
              required: false
              type: string
            - name: isPublic
              in: query
              required: false
              type: boolean
        integration:
          type: AWS_PROXY
          lambda_function: nx-tt-dev-ver3-prompt-crud
          timeout: 29000
      
      - method: POST
        description: "프롬프트 생성"
        request:
          body:
            required: true
            schema:
              type: object
              properties:
                userId:
                  type: string
                engineType:
                  type: string
                promptName:
                  type: string
                prompt:
                  type: object
                  properties:
                    description:
                      type: string
                    instruction:
                      type: string
                files:
                  type: array
                isPublic:
                  type: boolean
              required: ["userId", "engineType", "promptName", "prompt"]
        integration:
          type: AWS_PROXY
          lambda_function: nx-tt-dev-ver3-prompt-crud
          timeout: 29000

  # ===== PROMPT BY ID =====
  - path: /prompts/{promptId}
    methods:
      - method: GET
        description: "특정 프롬프트 조회"
        integration:
          type: AWS_PROXY
          lambda_function: nx-tt-dev-ver3-prompt-crud
          timeout: 29000
      
      - method: PUT
        description: "프롬프트 업데이트"
        integration:
          type: AWS_PROXY
          lambda_function: nx-tt-dev-ver3-prompt-crud
          timeout: 29000
      
      - method: DELETE
        description: "프롬프트 삭제"
        integration:
          type: AWS_PROXY
          lambda_function: nx-tt-dev-ver3-prompt-crud
          timeout: 29000

  # ===== USAGE =====
  - path: /usage
    methods:
      - method: GET
        description: "사용량 조회"
        request:
          parameters:
            - name: userId
              in: query
              required: true
              type: string
            - name: period
              in: query
              required: false
              type: string
              enum: ["daily", "weekly", "monthly"]
              default: "monthly"
            - name: engineType
              in: query
              required: false
              type: string
        integration:
          type: AWS_PROXY
          lambda_function: nx-tt-dev-ver3-usage-handler
          timeout: 29000

# API Gateway 메서드 응답 설정
method_responses:
  # 4XX 에러 매핑
  400:
    response_templates:
      application/json: |
        {
          "error": "Bad Request",
          "message": "$context.error.message"
        }
  
  401:
    response_templates:
      application/json: |
        {
          "error": "Unauthorized",
          "message": "Authentication required"
        }
  
  403:
    response_templates:
      application/json: |
        {
          "error": "Forbidden",
          "message": "Access denied"
        }
  
  404:
    response_templates:
      application/json: |
        {
          "error": "Not Found",
          "message": "Resource not found"
        }
  
  # 5XX 에러 매핑
  500:
    response_templates:
      application/json: |
        {
          "error": "Internal Server Error",
          "message": "An error occurred processing your request"
        }
  
  502:
    response_templates:
      application/json: |
        {
          "error": "Bad Gateway",
          "message": "Lambda function error"
        }
  
  504:
    response_templates:
      application/json: |
        {
          "error": "Gateway Timeout",
          "message": "Request timeout"
        }

# 인증 설정 (Cognito)
authorizer:
  type: COGNITO_USER_POOLS
  name: nexus-authorizer
  identity_source: method.request.header.Authorization
  user_pools:
    - arn:aws:cognito-idp:us-east-1:887078546492:userpool/us-east-1_ohLOswurY
  ttl: 300  # 인증 캐시 시간 (초)

# 요청 검증
request_validators:
  - name: validate-body
    validate_request_body: true
    validate_request_parameters: false
  
  - name: validate-params
    validate_request_body: false
    validate_request_parameters: true
  
  - name: validate-all
    validate_request_body: true
    validate_request_parameters: true

# API 문서화 (OpenAPI/Swagger)
documentation:
  version: "1.0.0"
  title: "Nexus REST API"
  description: "AI-powered title generation service API"
  contact:
    name: "API Support"
    email: "api@sedaily.io"
  servers:
    - url: "https://api.sedaily.io"
      description: "Production"
    - url: "https://api-dev.sedaily.io"
      description: "Development"

# 모니터링 설정
monitoring:
  cloudwatch:
    metrics_enabled: true
    log_level: ERROR  # ERROR, INFO, DEBUG
    data_trace_enabled: false  # 요청/응답 본문 로깅
    
  x_ray:
    tracing_enabled: true  # 분산 추적
    sampling_rate: 0.1  # 10% 샘플링

# 배포 설정
deployment:
  stage_variables:
    lambdaAlias: "prod"  # Lambda 버전/별칭
    environment: "production"
  
  canary_settings:
    percent_traffic: 0  # 카나리 배포 비율
    use_stage_cache: false